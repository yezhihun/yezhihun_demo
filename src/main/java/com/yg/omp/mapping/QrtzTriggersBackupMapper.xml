<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yg.omp.mapper.QrtzTriggersBackupMapper" >
  <resultMap id="BaseResultMap" type="com.yg.omp.entity.QrtzTriggersBackup" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="SCHED_NAME" property="schedName" jdbcType="VARCHAR" />
    <result column="TRIGGER_NAME" property="triggerName" jdbcType="VARCHAR" />
    <result column="TRIGGER_GROUP" property="triggerGroup" jdbcType="VARCHAR" />
    <result column="JOB_NAME" property="jobName" jdbcType="VARCHAR" />
    <result column="JOB_GROUP" property="jobGroup" jdbcType="VARCHAR" />
    <result column="DESCRIPTION" property="description" jdbcType="VARCHAR" />
    <result column="FIRE_TIME" property="fireTime" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP, DESCRIPTION, FIRE_TIME
  </sql>
  <resultMap id="BaseResultMap01" type="com.yg.omp.entity.QrtzTriggersBackup" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="TRIGGER_NAME" property="triggerName" jdbcType="VARCHAR" />
    <result column="JOB_NAME" property="jobName" jdbcType="VARCHAR" />
    <result column="TRIGGER_STATE" property="triggerState" jdbcType="VARCHAR" />
    <result column="DESCRIPTION" property="description" jdbcType="VARCHAR" />
    <result column="FIRE_TIME" property="fireTime" jdbcType="BIGINT" />
  </resultMap>
  <select id="selectListByPage" resultMap="BaseResultMap01" parameterType="com.yg.omp.model.QrtzTriggersBackupExample" >
    select
    		qt.JOB_NAME,
		    qt.DESCRIPTION,
		    qt.FIRE_TIME, 
		    qt.TRIGGER_STATE, 
		    qt.TRIGGER_NAME
    from (
	    select 
		    qt.JOB_NAME,
		    qt.DESCRIPTION,
		    qt.NEXT_FIRE_TIME AS FIRE_TIME, 
		    qct.CRON_EXPRESSION, 
		    qt.TRIGGER_STATE, 
		    qt.TRIGGER_NAME 
		from qrtz_triggers qt 
		left join qrtz_cron_triggers qct
		on qt.SCHED_NAME = qct.SCHED_NAME 
		and qt.TRIGGER_GROUP = qct.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qct.TRIGGER_NAME 
		union
		select 
			qt.JOB_NAME, 
			qt.DESCRIPTION, 
			qt.FIRE_TIME, 
			qct.CRON_EXPRESSION, 
			qtb.TRIGGER_STATE, 
			qt.TRIGGER_NAME 
		from 
			qrtz_triggers_backup qt
		left join qrtz_cron_triggers qct 
		on qt.SCHED_NAME = qct.SCHED_NAME 
		and qt.TRIGGER_GROUP = qct.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qct.TRIGGER_NAME 
		left join qrtz_triggers qtb 
		on qt.SCHED_NAME = qtb.SCHED_NAME 
		and qt.TRIGGER_GROUP = qtb.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qtb.TRIGGER_NAME
    	) qt
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    group by qt.TRIGGER_NAME
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectCountPage" resultType="java.lang.Integer" parameterType="com.yg.omp.model.QrtzTriggersBackupExample" >
    select
    count(DISTINCT qt.TRIGGER_NAME)
    from (
	    select 
		    qt.JOB_NAME,
		    qt.DESCRIPTION,
		    qt.NEXT_FIRE_TIME AS FIRE_TIME, 
		    qct.CRON_EXPRESSION, 
		    qt.TRIGGER_STATE, 
		    qt.TRIGGER_NAME 
		from qrtz_triggers qt 
		left join qrtz_cron_triggers qct
		on qt.SCHED_NAME = qct.SCHED_NAME 
		and qt.TRIGGER_GROUP = qct.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qct.TRIGGER_NAME 
		union
		select 
			qt.JOB_NAME, 
			qt.DESCRIPTION, 
			qt.FIRE_TIME, 
			qct.CRON_EXPRESSION, 
			qtb.TRIGGER_STATE, 
			qt.TRIGGER_NAME 
		from 
			qrtz_triggers_backup qt
		left join qrtz_cron_triggers qct 
		on qt.SCHED_NAME = qct.SCHED_NAME 
		and qt.TRIGGER_GROUP = qct.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qct.TRIGGER_NAME 
		left join qrtz_triggers qtb 
		on qt.SCHED_NAME = qtb.SCHED_NAME 
		and qt.TRIGGER_GROUP = qtb.TRIGGER_GROUP 
		and qt.TRIGGER_NAME = qtb.TRIGGER_NAME
    	) qt
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yg.omp.model.QrtzTriggersBackupExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from qrtz_triggers_backup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    select 
    <include refid="Base_Column_List" />
    from qrtz_triggers_backup
    where ID = #{id,jdbcType=INTEGER}
      and SCHED_NAME = #{schedName,jdbcType=VARCHAR}
      and TRIGGER_NAME = #{triggerName,jdbcType=VARCHAR}
      and TRIGGER_GROUP = #{triggerGroup,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    delete from qrtz_triggers_backup
    where ID = #{id,jdbcType=INTEGER}
      and SCHED_NAME = #{schedName,jdbcType=VARCHAR}
      and TRIGGER_NAME = #{triggerName,jdbcType=VARCHAR}
      and TRIGGER_GROUP = #{triggerGroup,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByJobName" parameterType="java.lang.String" >
    delete from qrtz_triggers_backup
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.yg.omp.model.QrtzTriggersBackupExample" >
    delete from qrtz_triggers_backup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    insert into qrtz_triggers_backup (ID, SCHED_NAME, TRIGGER_NAME, 
      TRIGGER_GROUP, JOB_NAME, JOB_GROUP, 
      DESCRIPTION, FIRE_TIME)
    values (#{id,jdbcType=INTEGER}, #{schedName,jdbcType=VARCHAR}, #{triggerName,jdbcType=VARCHAR}, 
      #{triggerGroup,jdbcType=VARCHAR}, #{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{fireTime,jdbcType=BIGINT})
  </insert>
  <insert id="insertBackupData" parameterType="java.lang.String" >
    insert into qrtz_triggers_backup (
	    SCHED_NAME,
	    TRIGGER_NAME,
	    JOB_NAME,
	    DESCRIPTION,
	    FIRE_TIME,
	    JOB_GROUP,
	    TRIGGER_GROUP 
		)
    select 
	    qt.SCHED_NAME,
	    qt.TRIGGER_NAME,
	    qt.JOB_NAME,
	    qt.DESCRIPTION,
	    qt.PREV_FIRE_TIME as FIRE_TIME,
	    qt.JOB_GROUP,
	    qt.TRIGGER_GROUP 
	FROM qrtz_triggers qt 
	left join qrtz_cron_triggers qct 
	on qt.SCHED_NAME = qct.SCHED_NAME 
	and qt.TRIGGER_GROUP= qct.TRIGGER_GROUP 
	and qt.TRIGGER_NAME = qct.TRIGGER_NAME 
	WHERE qt.JOB_NAME = #{jobName,jdbcType=VARCHAR}
  </insert>
  <insert id="insertSelective" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    insert into qrtz_triggers_backup
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="schedName != null" >
        SCHED_NAME,
      </if>
      <if test="triggerName != null" >
        TRIGGER_NAME,
      </if>
      <if test="triggerGroup != null" >
        TRIGGER_GROUP,
      </if>
      <if test="jobName != null" >
        JOB_NAME,
      </if>
      <if test="jobGroup != null" >
        JOB_GROUP,
      </if>
      <if test="description != null" >
        DESCRIPTION,
      </if>
      <if test="fireTime != null" >
        FIRE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="schedName != null" >
        #{schedName,jdbcType=VARCHAR},
      </if>
      <if test="triggerName != null" >
        #{triggerName,jdbcType=VARCHAR},
      </if>
      <if test="triggerGroup != null" >
        #{triggerGroup,jdbcType=VARCHAR},
      </if>
      <if test="jobName != null" >
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null" >
        #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="fireTime != null" >
        #{fireTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yg.omp.model.QrtzTriggersBackupExample" resultType="java.lang.Integer" >
    select count(*) from qrtz_triggers_backup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="java.util.Map" >
    update qrtz_triggers_backup
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.schedName != null" >
        SCHED_NAME = #{record.schedName,jdbcType=VARCHAR},
      </if>
      <if test="record.triggerName != null" >
        TRIGGER_NAME = #{record.triggerName,jdbcType=VARCHAR},
      </if>
      <if test="record.triggerGroup != null" >
        TRIGGER_GROUP = #{record.triggerGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.jobName != null" >
        JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobGroup != null" >
        JOB_GROUP = #{record.jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null" >
        DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.fireTime != null" >
        FIRE_TIME = #{record.fireTime,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="java.util.Map" >
    update qrtz_triggers_backup
    set ID = #{record.id,jdbcType=INTEGER},
      SCHED_NAME = #{record.schedName,jdbcType=VARCHAR},
      TRIGGER_NAME = #{record.triggerName,jdbcType=VARCHAR},
      TRIGGER_GROUP = #{record.triggerGroup,jdbcType=VARCHAR},
      JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      JOB_GROUP = #{record.jobGroup,jdbcType=VARCHAR},
      DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      FIRE_TIME = #{record.fireTime,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    update qrtz_triggers_backup
    <set >
      <if test="jobName != null" >
        JOB_NAME = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null" >
        JOB_GROUP = #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        DESCRIPTION = #{description,jdbcType=VARCHAR},
      </if>
      <if test="fireTime != null" >
        FIRE_TIME = #{fireTime,jdbcType=BIGINT},
      </if>
    </set>
    where TRIGGER_NAME = #{triggerName,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yg.omp.entity.QrtzTriggersBackup" >
    update qrtz_triggers_backup
    set JOB_NAME = #{jobName,jdbcType=VARCHAR},
      JOB_GROUP = #{jobGroup,jdbcType=VARCHAR},
      DESCRIPTION = #{description,jdbcType=VARCHAR},
      FIRE_TIME = #{fireTime,jdbcType=BIGINT}
    where TRIGGER_NAME = #{triggerName,jdbcType=VARCHAR}
  </update>
</mapper>